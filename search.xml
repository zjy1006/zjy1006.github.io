<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>bandicam破解</title>
      <link href="/posts/102140ea.html"/>
      <url>/posts/102140ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="bandicam破解"><a href="#bandicam破解" class="headerlink" title="bandicam破解"></a>bandicam破解</h1><h2 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h2><p><a href="https://www.bandicam.cn/" target="_blank" rel="noopener">官方下载bandicam</a>，然后正常安装就行。</p><h2 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h2><ol><li><p>下载bandicam注册机</p></li><li><p>链接：<a href="https://pan.baidu.com/s/1xcGG5qP24gVUJa_IY55ZWg" target="_blank" rel="noopener">https://pan.baidu.com/s/1xcGG5qP24gVUJa_IY55ZWg</a> 提取码：fu1c</p></li><li><p>管理员身份打开注册机，填写随便一个邮箱即可。</p></li><li><p>配置hosts文件填写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 bandicam.com</span><br><span class="line">0.0.0.0 ssl.bandicam.com</span><br><span class="line">0.0.0.0 ssl.bandisoft.com</span><br><span class="line">0.0.0.0 cert.bandicam.com</span><br><span class="line">0.0.0.0 cert.bandicam.com</span><br><span class="line">0.0.0.0 www.bandicam.com</span><br><span class="line"></span><br><span class="line">提示：用注册机破解解密注册后，然后在系统hosts里添加上面这几条</span><br><span class="line">这几条是注册机里没有的，是新增的，最后一条还可以屏蔽自动更新！</span><br></pre></td></tr></table></figure></li></ol><p>end</p>]]></content>
      
      
      <categories>
          
          <category> 安装和破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs 检查对ES6 支持程度</title>
      <link href="/posts/26611224.html"/>
      <url>/posts/26611224.html</url>
      
        <content type="html"><![CDATA[<h1 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h1><p>全局安装 es-checker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g es-checker</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls &#x2F;&#x2F;查看全局安装的位置</span><br></pre></td></tr></table></figure><h1 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h1><p>检查Node.js 支持ES 6的程度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es-checker</span><br></pre></td></tr></table></figure><p>输入命令时出现这种错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">es-checker : 无法加载文件 C:\develop\nodejs\node_global\es-checker.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;</span><br><span class="line">135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ es-checker</span><br><span class="line">+ ~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200519205249.png" alt=""></p><p>解决：</p><ol><li><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/image-20200519205436129.png" alt=""></li><li><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200519205515.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 我的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch</title>
      <link href="/posts/d32d37e5.html"/>
      <url>/posts/d32d37e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="背景及介绍"><a href="#背景及介绍" class="headerlink" title="背景及介绍"></a>背景及介绍</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库——无论是开源还是私有，但它也仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理，因为Lucene 非常复杂。<ul><li>Lucene不支持分布式的。数据越大，存不下来。就需要多台服务器存数据，同时多台服务器都要安装Lucene。然后通过代码合并搜索结果。</li><li>数据要考虑安全性，一台服务器挂了，那么上面的数据不就消失了。</li></ul></li><li>为了解决Lucene使用时的繁复性和保证数据的安全性，于是Elasticsearch便应运而生。它使用 Java 编写，内部采用 Lucene 做索引与搜索，但是它的目标是使全文检索变得更简单，简单来说，就是对Lucene 做了一层封装，它提供了一套简单一致的 RESTful API 来帮助我们实现存储和检索。</li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Elasticsearch是一个开源的分布式、RESTful 风格的<strong>搜索</strong>和<strong>数据分析</strong>引擎。它的底层是开源库Apache Lucene。<ul><li>可以作为一个大型分布式集群（数百台服务器）技术，处理PB级数据，服务大公司；也可以运行在单机上，服务小公司</li><li>Elasticsearch不是什么新技术，主要是将全文检索、数据分析以及分布式技术，合并在了一起，才形成了独一无二的ES；lucene（全文检索），商用的数据分析软件（也是有的），分布式数据库（mycat）</li><li>对用户而言，是开箱即用的，非常简单，作为中小型的应用，直接3分钟部署一下ES，就可以作为生产环境的系统来使用了，数据量不大，操作不是太复杂</li><li>数据库的功能面对很多领域是不够用的（事务，还有各种联机事务型的操作）；特殊的功能，比如全文检索，同义词处理，相关度排名，复杂数据分析，海量数据的近实时处理；Elasticsearch作为传统数据库的一个补充，提供了数据库所不能提供的很多功能</li><li>摘抄自：链接：<a href="https://www.jianshu.com/p/60b242cbd8b4" target="_blank" rel="noopener">https://www.jianshu.com/p/60b242cbd8b4</a></li></ul></li><li>用mysql也可以做到数据的搜索和数据的分析。但是业有专攻，mysql主要是用来做数据的持久化存储和管理的（也就是CRUD）。</li><li>成为当今全文搜索领域的主流软件之一！</li></ul><h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p>全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。<strong>这个过程类似于通过字典中的检索字表查字的过程。</strong></p><h4 id="全文检索的方法主要分为按字检索和按词检索两种。"><a href="#全文检索的方法主要分为按字检索和按词检索两种。" class="headerlink" title="全文检索的方法主要分为按字检索和按词检索两种。"></a>全文检索的方法主要分为按字检索和按词检索两种。</h4><h5 id="按字检索"><a href="#按字检索" class="headerlink" title="按字检索"></a>按字检索</h5><p>是指对于文章中的每一个字都建立索引，检索时将词分解为字的组合。对于各种不同的语言而言，字有不同的含义，比如英文中字与词实际上是合一的，而中文中字与词有很大分别。</p><h5 id="按词检索"><a href="#按词检索" class="headerlink" title="按词检索"></a>按词检索</h5><p>指对文章中的词，即语义单位建立索引，检索时按词检索，并且可以处理同义项等。英文等西方文字由于按照空白切分词，因此实现上与按字处理类似，添加同义处理也很容易。中文等东方文字则需要切分字词，以达到按词索引的目的，关于这方面的问题，是当前全文检索技术尤其是中文全文检索技术中的难点，在此不做详述。</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>搜索引擎的原理就是建立倒排索引。是根据文章内容中的关键字建立索引。</p><ul><li>分片就是将大段的信息切成小段，每段称为为片，且有一个专有ID，</li><li>倒排索引就是分片之后，以关键词做KEY，分片ID做VALUE</li></ul><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200516013445.png" alt=""></p><blockquote><ul><li>将每一个要保存的记录拆分成单个的词，并进行记录</li><li>如果要检索某一个词或者句子。会按照记录中出现词的频率进行相关性得分计算得出匹配值最高的返回给用户</li></ul></blockquote><h2 id="ElasticSearch的基础概念"><a href="#ElasticSearch的基础概念" class="headerlink" title="ElasticSearch的基础概念"></a>ElasticSearch的基础概念</h2><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200516020654.png" alt=""></p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200516020745.png" alt=""></p><h2 id="Docker安装ES"><a href="#Docker安装ES" class="headerlink" title="Docker安装ES"></a>Docker安装ES</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.4.2</span><br><span class="line">docker pull kibana:7.4.2</span><br><span class="line"></span><br><span class="line">docker images &#x2F;&#x2F;检查信息</span><br><span class="line">free -m &#x2F;&#x2F;查看内存</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;config</span><br><span class="line">sudo mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;data</span><br><span class="line"></span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;&gt; &#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line"></span><br><span class="line">chmod -R 777 &#x2F;mydata&#x2F;elasticsearch&#x2F;</span><br><span class="line"></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e “discovery.type&#x3D;single-node” -e ES_JAVA_OPTS&#x3D;&quot;-Xms256m -Xmx256m&quot; -v &#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml -v &#x2F;mydata&#x2F;elasticsearch&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data -v &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins -d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><blockquote><p>中途踩过的坑：</p><ul><li>main ERROR No Log4j 2 configuration file found. Using default configuration (logging only errors to the console), or user programmatically provided configurations. Set system property ‘log4j2.debug’ to show Log4j 2 internal initialization logging. See <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/manual/configuration.html</a> for instructions on how to configure Log4j 2<br>Exception in thread “main” SettingsException[Failed to load settings from [elasticsearch.yml]]; nested: ParsingException[Failed to parse object: expecting token of type [START_OBJECT] but found [VALUE_STRING]];</li><li>解决：冒号后面加一个空格（http.host: 0.0.0.0）</li></ul></blockquote><p>看到这个就安装成功了：</p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200516042935.png" alt=""></p><h2 id="Docker快速安装kibana"><a href="#Docker快速安装kibana" class="headerlink" title="Docker快速安装kibana"></a>Docker快速安装kibana</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.10 -p 5601:5601 -d kibana:7.4.2</span><br></pre></td></tr></table></figure><blockquote><p>中途踩到的坑：</p><ul><li><p>访问出现：Kibana server is not ready yet  </p><ul><li><p>解决： docker logs kibana   后发现问题是：Error: No Living connections</p></li><li><p>将配置文件kibana.yml中的elasticsearch.url改为正确的链接，默认为: <a href="http://elasticsearch:9200，改为http://自己的IP地址:9200">http://elasticsearch:9200，改为http://自己的IP地址:9200</a></p><ul><li><pre><code>find / -type f -name kibana.yml        //搜索kibana.yml文件位置一下搜索到了三个文件：/var/lib/docker/overlay2/2656a983a8bbd86b59010529be3e8f3cd516224e51757262a1046b1cd6c348cb/diff/usr/share/kibana/config/kibana.yml/var/lib/docker/overlay2/38ccdac20b4715cb79c0f7069792d752932740a3aab31117b8d555abce565899/diff/usr/share/kibana/config/kibana.yml/var/lib/docker/overlay2/43ebf6e1d13cdf4ff3a65abe2009a5012627da137a7c50b1634441e3c020cd5f/merged/usr/share/kibana/config/kibana.yml每个都进去看一下，最终确定是第二个文件。然后改了就行了</code></pre></li><li><p>我的参考：<a href="https://blog.csdn.net/fv8023/article/details/96427702和https://blog.csdn.net/qq_35210048/article/details/105962845" target="_blank" rel="noopener">https://blog.csdn.net/fv8023/article/details/96427702和https://blog.csdn.net/qq_35210048/article/details/105962845</a></p></li></ul></li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vagrant和VirtualBox</title>
      <link href="/posts/3849af02.html"/>
      <url>/posts/3849af02.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vagrant和VirtualBox"><a href="#Vagrant和VirtualBox" class="headerlink" title="Vagrant和VirtualBox"></a><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a>和<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a></h1><h2 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h2><p>Vagrant是一个基于<a href="https://baike.baidu.com/item/Ruby/11419" target="_blank" rel="noopener">Ruby</a>的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源VirtualBox虚拟化系统，使用 Chef创建自动化虚拟环境。</p><p>拿VirtualBox举例，VirtualBox会开放一个创建虚拟机的接口，Vagrant会利用这个接口创建虚拟机，并且通过Vagrant来管理，配置和自动安装虚拟机。</p><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><p>VirtualBox 是一款开源<a href="https://baike.baidu.com/item/虚拟机软件/9003764" target="_blank" rel="noopener">虚拟机软件</a>。VirtualBox 是由德国 Innotek 公司开发，由<a href="https://baike.baidu.com/item/Sun/69463" target="_blank" rel="noopener">Sun</a> Microsystems公司出品的软件，使用<a href="https://baike.baidu.com/item/Qt" target="_blank" rel="noopener">Qt</a>编写，在 Sun 被 <a href="https://baike.baidu.com/item/Oracle" target="_blank" rel="noopener">Oracle</a> 收购后正式更名成 Oracle VM VirtualBox。Innotek 以 GNU General Public License (GPL) 释出 VirtualBox，并提供二进制版本及 OSE 版本的代码。使用者可以在VirtualBox上安装并且执行<a href="https://baike.baidu.com/item/Solaris" target="_blank" rel="noopener">Solaris</a>、<a href="https://baike.baidu.com/item/Windows" target="_blank" rel="noopener">Windows</a>、<a href="https://baike.baidu.com/item/DOS/32025" target="_blank" rel="noopener">DOS</a>、<a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>、OS/2 Warp、<a href="https://baike.baidu.com/item/BSD" target="_blank" rel="noopener">BSD</a>等系统作为客户端操作系统。已由<a href="https://baike.baidu.com/item/甲骨文公司/430115" target="_blank" rel="noopener">甲骨文公司</a>进行开发，是甲骨文公司xVM虚拟化平台技术的一部份。</p><h1 id="看操作"><a href="#看操作" class="headerlink" title="看操作"></a>看操作</h1><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><ol><li><a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">vagrant官方镜像仓库</a></li><li><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">到官网下载Vagrant</a>，下载好了一路安装即可（当然也可以选择安装其他盘，默认是c盘）。安装完重启电脑即可<ol><li>验证是否安装成功：在cmd窗口输入：vagrant</li><li>如果出现命令行提示，证明安装成功。</li></ol></li><li>再去下载<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a>，同样是一路安装即可。</li></ol><h2 id="用Vagrant给VirtualBox创建虚拟机"><a href="#用Vagrant给VirtualBox创建虚拟机" class="headerlink" title="用Vagrant给VirtualBox创建虚拟机"></a>用Vagrant给VirtualBox创建虚拟机</h2><ol><li><p>只需两行简单命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init centos&#x2F;7</span><br><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure><ol><li>在用户目录下初始化一个 Vagrantfile 的配置文件<img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200515230949.png" alt=""></li><li>接下来再用第二行命令：如果没有镜像会进行下载centos/7，并且会挂载到VirtualBox上并启动。下载速度慢可以用迅雷。</li></ol></li><li><p>连接虚拟机用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure></li><li><p>退出虚拟机用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li></ol><h2 id="虚拟机网络设置"><a href="#虚拟机网络设置" class="headerlink" title="虚拟机网络设置"></a>虚拟机网络设置</h2><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200515232502.png" alt=""></p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200515232940.png" alt=""></p><p>什么是网络地址转换-端口转发</p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200515233106.png" alt=""></p><ul><li>所以我们希望可以给虚拟机一个固定的ip地址，可以跟我们的电脑进行ping通，这样的话我们虚拟机当中装好一个软件，我们直接那它的ip地址访问就可以了。</li><li>因为我们用的是vagrant创建的虚拟机。有着vagrantfile的配置文件。就可以直接改固定的ip地址。当然也可以改虚拟机的网卡设置（太麻烦）<ul><li><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200515233827.png" alt=""></li><li><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20200515233959.png" alt=""></li></ul></li><li>修改好了重新启动虚拟机即可。<ul><li>查看ip用：ip addr</li><li>再相互ping一下</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git和GitHub详解</title>
      <link href="/posts/40e6270a.html"/>
      <url>/posts/40e6270a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git和GitHub详解"><a href="#Git和GitHub详解" class="headerlink" title="Git和GitHub详解"></a>Git和GitHub详解</h1><h2 id="（一）Git基础"><a href="#（一）Git基础" class="headerlink" title="（一）Git基础"></a>（一）Git基础</h2><h3 id="Git-下载和安装"><a href="#Git-下载和安装" class="headerlink" title="Git 下载和安装"></a>Git 下载和安装</h3><ul><li>下载地址： <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li><li>使用默认值安装</li><li>资源管理器内单击鼠标右键选择 <code>Git Bash Here</code></li><li>输入<code>git --version</code> 检查是否安装成功</li></ul><h3 id="Git-基本工作流程"><a href="#Git-基本工作流程" class="headerlink" title="Git 基本工作流程"></a>Git 基本工作流程</h3><blockquote><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE1.png" alt=""></p><p>主要涉及到四个关键点：</p><ol><li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li><li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li></ol><p>更细节的来看：</p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE2.png" alt=""></p><p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p><p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p><ol><li><p>git管理配置的命令；</p><p><strong>几个核心存储区的交互命令：</strong></p></li><li><p>工作区与暂存区的交互；</p></li><li><p>暂存区与本地仓库（分支）上的交互；</p></li><li><p>本地仓库与远程仓库的交互。</p></li></ol><p>作者：你听___<br>链接：<a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596" target="_blank" rel="noopener">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><table><thead><tr><th>工作目录</th><th>暂存区</th><th>git 仓库</th><th>远程仓库</th></tr></thead><tbody><tr><td>被Git管理的项目</td><td>临时存放被修改的文件</td><td>目录用于存放提交记录</td><td>远程代码仓库</td></tr><tr><td><code>git init</code></td><td><code>git add</code></td><td><code>git commit</code></td><td><code>git push</code></td></tr></tbody></table><h3 id="Git使用前的配置命令"><a href="#Git使用前的配置命令" class="headerlink" title="Git使用前的配置命令"></a>Git使用前的配置命令</h3><p>在使用前告诉git你是谁：</p><ol><li><p>第一次使用git，配置用户信息</p><ol><li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li><li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li></ol></li><li><blockquote><p>查询配置信息</p></blockquote><ol><li>列出当前配置：<code>git config --list</code>;</li><li>列出repository配置：<code>git config --local --list</code>;</li><li>列出全局配置：<code>git config --global --list</code>;</li><li>列出系统配置：<code>git config --system --list</code>;</li></ol></li><li><blockquote><p>其他配置</p></blockquote><ol><li>配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff：<code>git config --global merge.tool vimdiff</code>;</li><li>配置git命令输出为彩色的：<code>git config --global color.ui auto</code>;</li><li>配置git使用的文本编辑器：<code>git config --global core.editor vi</code>;</li></ol></li><li><blockquote><p>注：</p></blockquote><ol><li>更改–&gt;重复上述命令</li><li>也可直接修改 <code>C:\Users\用户\.gitconfig</code></li></ol></li></ol><h3 id="工作区上的操作命令"><a href="#工作区上的操作命令" class="headerlink" title="工作区上的操作命令"></a>工作区上的操作命令</h3><h4 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h4><ol><li><p><code>git init</code> 初始化git仓库</p><blockquote><blockquote><p>新建仓库</p></blockquote><ol><li>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>git init</code>；</li><li>从远程git仓库复制项目：<code>git clone</code>; 克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名：<code>git clone git://github.com/wasd/example.git NewName</code>；</li></ol></blockquote></li><li><p><code>git status</code> 查看文件状态</p><blockquote><blockquote><p>查新信息</p></blockquote><ol><li>查询当前工作区所有文件的状态：<code>git status</code>;</li><li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git diff</code>;</li></ol></blockquote></li><li><p><code>git add 文件/文件列表</code> 提交到暂存区</p><blockquote><blockquote><p>提交</p></blockquote><ol><li>提交工作区所有文件到暂存区：<code>git add .</code></li><li>提交工作区中指定文件到暂存区：<code>git add   ...</code>;</li><li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li></ol></blockquote></li><li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p><blockquote><blockquote><p>提交文件到版本库</p></blockquote><ol><li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li><li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li></ol></blockquote></li><li><p><code>git log</code> 查看提交记录</p><blockquote><blockquote><p>查看信息</p></blockquote><ol><li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li><li>指定文件在暂存区和本地仓库的不同：<code>git diff  --cached</code>;</li><li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li></ol></blockquote></li></ol><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ul><li><p>用暂存区中的文件覆盖工作目录中的文件：<code>git checkout -- 文件名</code>  不加 <code>-- 文件名</code>则覆盖全部文件</p></li><li><p>将文件从暂存区中删除：<code>git rm --cached 文件名</code></p></li><li><p>将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git reset --hard commitID</code>  </p></li><li><blockquote><blockquote><p>撤销</p></blockquote><ol><li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm</code>;</li><li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached</code>;</li><li>取消暂存区已经暂存的文件：<code>git reset HEAD ...</code>;</li><li>撤销上一次对文件的操作：<code>git checkout --</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；</li><li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li><li>查看当前所有的储藏：<code>git stash list</code>；</li><li>应用最新的储藏：<code>git stash apply</code>，如果想应用更早的储藏：<code>git stash apply stash@{2}</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply --index</code>;</li><li>使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git stash drop stash{0}</code>；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git stash pop</code>;</li><li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git stash show -p stash@{0} | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p | git apply -R</code>；</li></ol><blockquote><p>更新文件</p></blockquote><ol><li>重命名文件，并将已改名文件提交到暂存区：<code>git mv [file-original] [file-renamed]</code>;</li></ol></blockquote></li></ul><h2 id="（二）Git进阶"><a href="#（二）Git进阶" class="headerlink" title="（二）Git进阶"></a>（二）Git进阶</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>生成副本，避免影响开发主线</p><h4 id="分支细分"><a href="#分支细分" class="headerlink" title="分支细分"></a>分支细分</h4><ol><li>主分支（master）：第一次向git仓库提交更新记录时自动产生的一个分支。</li><li>开发分支（develop）：作为开发的分支，基于master分支创建。</li><li>功能分支（feature）：作为开发具体功能的分支基于开发分支创建。</li></ol><h4 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h4><ul><li><code>git branch</code> 查看分支</li><li><code>git branch 分支名称</code> 创建分支</li><li><code>git checkout 分支名称</code> 切换分支</li><li><code>git merge 来源分支</code> 合并分支</li><li><code>git branch -d 分支名称</code> 删除分支（分支合并后才允许被删除）（-D 大写强制删除）<ul><li><code>git push origin :branch-name</code> : 远程仓库同步删除掉的分支</li></ul></li></ul><p>注意：</p><p>​        开发分支文件后要 <code>commit</code> 后再切换主分支，否则分支文件会出现在主分支里面。</p><blockquote><blockquote><p>分支管理</p></blockquote><ol><li>创建分支：<code>git branch</code>，如<code>git branch testing</code>；</li><li>从当前所处的分支切换到其他分支：<code>git checkout</code>，如<code>git checkout testing</code>；</li><li>新建并切换到新建分支上：<code>git checkout -b</code>;</li><li>删除分支：<code>git branch -d</code>；</li><li>将当前分支与指定分支进行合并：<code>git merge</code>;</li><li>显示本地仓库的所有分支：<code>git branch</code>;</li><li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li><li>查看哪些分支已经合并到当前分支：<code>git branch --merged</code>;</li><li>查看当前哪些分支还没有合并到当前分支：<code>git branch --no-merged</code>;</li><li>把远程分支合并到当前分支：<code>git merge /</code>，如<code>git merge origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li><li>在远程分支的基础上创建新的本地分支<code>：git checkout -b  /</code>，如<code>git checkout -b serverfix origin/serverfix</code>;</li><li>从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git pull</code>；</li><li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git rebase</code>，如<code>git rebase master server</code>，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto</code>，如<code>git rebase --onto master server client</code>；使用rebase操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作</strong>；</li></ol></blockquote><h3 id="暂时保存更改"><a href="#暂时保存更改" class="headerlink" title="暂时保存更改"></a>暂时保存更改</h3><p>git中可以不提交更改，只提取分支上所有改动并储存，让开发人员得到一个干净的副本，临时转向其它工作。复制到“剪切板”，可以“粘贴“到其它分支。</p><p>场景：</p><ul><li>储存临时改动：<code>git stash</code></li><li>恢复临时改动：<code>git stash pop</code></li></ul><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><blockquote><blockquote><p>打标签</p></blockquote><p>Git 使用的标签有两种类型：<strong>轻量级的（lightweight）和含附注的（annotated）</strong>。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p><ol><li>列出现在所有的标签：<code>git tag</code>;</li><li>使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣：<code>git tag -l &quot;v1.4.2.*&quot;</code>;</li><li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4 -m &quot;my version 1.4&quot;</code>;</li><li>使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git show v1.4</code>;</li><li>如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5 -m &quot;my signed 1.5 tag&quot;</code>;</li><li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li><li>创建一个轻量级标签的话，就直接使用git tag命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git tag v1.5</code>;</li><li>将标签推送到远程仓库中：git push origin ，如<code>git push origin v1.5</code>；</li><li>将本地所有的标签全部推送到远程仓库中：<code>git push origin --tags</code>;</li></ol></blockquote><h2 id="（三）Github"><a href="#（三）Github" class="headerlink" title="（三）Github"></a>（三）Github</h2><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>略~</p><h3 id="多人协作开发流程"><a href="#多人协作开发流程" class="headerlink" title="多人协作开发流程"></a>多人协作开发流程</h3><ul><li>A在自己的计算机中创建本地仓库</li><li>A在GitHub中创建远程仓库</li><li>A将本地仓库推送到远程仓库</li><li>B克隆远程仓库到本地进行开发</li><li>B将本地仓库开发内容推送到远程仓库</li><li>A将远程仓库中的最新内容拉去本地</li></ul><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20191115154237.png" alt=""></p><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><ol><li><p><code>git push 远程仓库地址 分支名称</code> </p></li><li><p><code>git push 远程仓库地址别名 分支名称</code></p></li><li><p><code>git push -u 远程仓库地址别名 分支名称</code> </p><p><code>-u</code> 记住推送地址和分支，下次只需要输入<code>git push</code></p></li><li><p><code>git remote add 远程仓库地址别名 远程仓库地址</code></p></li><li><p>删除别名：<code>git remote remove 远程仓库地址别名</code></p></li><li><p>第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。</p></li><li><blockquote><h1 id="本地仓库上的操作"><a href="#本地仓库上的操作" class="headerlink" title="本地仓库上的操作"></a>本地仓库上的操作</h1><ol><li>查看本地仓库关联的远程仓库：<code>git remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</li><li>添加远程仓库，一般会取一个简短的别名：<code>git remote add [remote-name] [url]</code>，比如：<code>git remote add example git://github.com/example/example.git</code>;</li><li>从远程仓库中抓取本地仓库中没有的更新：<code>git fetch [remote-name]</code>，如<code>git fetch origin</code>;使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</li><li>将本地仓库某分支推送到远程仓库上：<code>git push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git push  :</code>，如<code>git push origin serverfix:awesomebranch</code>;如果想删除远程分支：<code>git push [romote-name] :</code>，如<code>git push origin :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</li><li>查看远程仓库的详细信息：<code>git remote show origin</code>；</li><li>修改某个远程仓库在本地的简称：<code>git remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</li><li>移除远程仓库：<code>git remote rm [remote-name]</code>；</li></ol></blockquote></li></ol><h3 id="拉取仓库"><a href="#拉取仓库" class="headerlink" title="拉取仓库"></a>拉取仓库</h3><h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><ul><li>克隆远程仓库到本地：<code>git clone 仓库地址</code></li></ul><h4 id="拉取远程仓库中最新版本"><a href="#拉取远程仓库中最新版本" class="headerlink" title="拉取远程仓库中最新版本"></a>拉取远程仓库中最新版本</h4><ul><li>拉取远程仓库最新版本到本地：<code>git pull 远程仓库地址 分支名称</code></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>多人开发同一个项目时，如果两个人修改了同一个文件同一个地方</p><ol><li><code>git pull</code></li><li>手动解决冲突 </li><li><code>git push</code> </li></ol><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20191115164339.png" alt=""></p><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><ol><li><code>fork</code>到自己的远程仓库</li><li><code>clone</code>到本地进行修改</li><li><code>push</code>到远程仓库</li><li><code>pull request</code>发送给原作者</li><li>原作者查看<code>commit</code> 审核</li><li>原作者 <code>merge pull request</code> </li></ol><h3 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h3><ol><li><p>生成密钥：<code>ssh-keygen</code></p><p>密匙储存目录：<code>C:\User\用户\\.ssh</code></p><p>公钥名称：<code>id_rsa.pub</code> </p><p>私钥名称：<code>id_rsa</code></p></li><li><p>Github添加公钥</p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20191115165957.png" alt=""></p></li><li><p>复制SSH地址：</p><p><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/20191115170348.png" alt=""></p></li><li><p>设置ssh别名：<code>$ git remote add origin_ssh SSH地址</code> </p></li><li><p>远程推送：<code>$ git push origin_ssh master</code> </p></li></ol><h3 id="Git忽略清单"><a href="#Git忽略清单" class="headerlink" title="Git忽略清单"></a>Git忽略清单</h3><p>将不需要的文件名字添加到此文件中，执行git 命令时就会忽略这些文件。</p><ul><li><p>git忽略清单文件名称：<code>.gitignore</code></p></li><li><p>将工作目录所有文件添加到缓存区：<code>git add .</code></p></li><li><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class="line">&#x2F;TODO</span><br><span class="line"># 忽略 build&#x2F; 目录下的所有文件</span><br><span class="line">build&#x2F;</span><br><span class="line"># 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class="line">doc&#x2F;*.txt</span><br><span class="line"># 忽略 doc&#x2F; 目录下所有扩展名为 txt 的文件</span><br><span class="line">doc&#x2F;**&#x2F;*.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="为仓库添加说明"><a href="#为仓库添加说明" class="headerlink" title="为仓库添加说明"></a>为仓库添加说明</h3><p>在仓库根目录添加<code>readme.md</code>文件即可</p><h2 id="（四）使用-SourceTree-管理-Git"><a href="#（四）使用-SourceTree-管理-Git" class="headerlink" title="（四）使用 SourceTree 管理 Git"></a>（四）使用 SourceTree 管理 Git</h2><blockquote><p><a href="https://blog.csdn.net/u012230055/article/details/64125268" target="_blank" rel="noopener">https://blog.csdn.net/u012230055/article/details/64125268</a></p></blockquote><h3 id="一-、SourceTree简介"><a href="#一-、SourceTree简介" class="headerlink" title="一 、SourceTree简介"></a>一 、SourceTree简介</h3><p>SourceTree 是 Windows 和Mac OS X 下免费的 <a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">Git</a> 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是Mercurial和Subversion<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">版本控制</a>系统工具。支持创建、提交、clone、push、pull 和merge等操作。</p><h3 id="二、下载安装SourceTree步骤"><a href="#二、下载安装SourceTree步骤" class="headerlink" title="二、下载安装SourceTree步骤"></a>二、下载安装SourceTree步骤</h3><ol><li><p>下载地址：<a href="https://www.sourcetreeapp.com/，该版本是中文的，下载完成后可以进行安装。" target="_blank" rel="noopener">https://www.sourcetreeapp.com/，该版本是中文的，下载完成后可以进行安装。</a> </p></li><li><p>点击“install”，安装完成后，打开sourcetree，点击“user an existing account”</p></li><li><p>注意：使用谷歌帐号登录即可，前提是你必须可以上谷歌才可以。</p></li><li><p>直接点击“跳过初始设置”即可。</p></li><li><p>登录注册成功后，弹出设置puttykey的界面，点击“取消”即可。</p></li><li><p>点击“取消”按钮，弹出如下提示框：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE3.png" alt=""></p></li></ol><p>   此时进入到sourcetree的主界面，现在就可以使用sourcetree啦。</p><h3 id="三、集成文件对比插件"><a href="#三、集成文件对比插件" class="headerlink" title="三、集成文件对比插件"></a>三、集成文件对比插件</h3><p>安装对比插件</p><p>Sourcetree中集成Beyond Compare 4，当文件冲突时可以很好的解决冲突。安装过程很简单，这里不再详述。</p><p>Sourcetree中配置Beyond Compare 4</p><p>菜单栏，“工具”——“选项”，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE4.png" alt=""></p><p>选择“比较”选项卡，然后将红色方框处的内容修改为如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE5.png" alt=""></p><h3 id="四、SourceTree基本使用"><a href="#四、SourceTree基本使用" class="headerlink" title="四、SourceTree基本使用"></a>四、SourceTree基本使用</h3><h4 id="（1）克隆"><a href="#（1）克隆" class="headerlink" title="（1）克隆"></a>（1）克隆</h4><p>点击克隆按钮，克隆项目：<br>    既可以是本地已有的git项目，也可以是远程目录中的项目，<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE6.png" alt=""></p><p>​    本地存在的git项目，<br>​    获取项目克隆地址，点击克隆按钮，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE7.png" alt=""></p><p>​    1、克隆项目的路径<br>​    2、克隆项目存放的位置<br>​    3、如果要下载特定的分支，可以按分支进行下载</p><h4 id="（2）配置忽略文件"><a href="#（2）配置忽略文件" class="headerlink" title="（2）配置忽略文件"></a>（2）配置忽略文件</h4><p>​    利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。<br>​    .gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了<br>​    使用sourcetree添加忽略文件的方法：<br>​    正常情况下，管理员创建项目后需要直接将忽略文件创建好。创建方法如图：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE8.png" alt=""></p><p>按照如上步骤操作即可编辑冲突文件。<br>冲突文件规则：<br>    忽略文件夹（如：bin、obj）：<br>    obj/<br>    bin/<br>某目录下的所有.txt文件，<br>    obj/*.txt<br>开发的过程中可能遇到一些忽略文件中未添加的文件，此时需要开发者自行添加忽略文件，添加方法如下：<br>    之前已经介绍过未进行版本控制的或者受版本控制的文件，在sourcetree的“文件状态” 标签中查找，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE9.png" alt=""></p><p>鼠标右键要忽略的文件，点击“忽略”，选择忽略的模式，即可将文件进行忽略，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE10.png" alt=""></p><h4 id="（3）tag使用方法"><a href="#（3）tag使用方法" class="headerlink" title="（3）tag使用方法"></a>（3）tag使用方法</h4><p>​    打tag的目的是在代码的主要节点处有个标记，方便下次修改代码时可以准确的找到想要找的代码。而无需看着日志文件逐一回忆要找的代码位置。<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE11.png" alt=""></p><h4 id="（4）分支管理与使用"><a href="#（4）分支管理与使用" class="headerlink" title="（4）分支管理与使用"></a>（4）分支管理与使用</h4><p>​    使用sourcetree创建和使用分支是很方便的，不像之前使用的TortoiseGit只能在当前代码处创建分支，使用sourcetree的方便之处：<br>​    1、可以选择特定的某版本创建分支<br>​    2、代码检出时可以按照分支进行检出<br>​    3、分支的添加很简单<br>分支添加：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE12.png" alt=""></p><p>​    1、可以在当前的版本下创建分支<br>​    2、选择指定的提交创建分支<br>​    3、点击“创建分支”<br>分支提交到服务器：<br>​    在sourcetree右侧内容中的分支列表中，选中创建的分支，右键提交，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE13.png" alt=""></p><p>分支合并：<br>    1、分支合并功能和分支添加功能类似，这里不再详述，需要注意的是首先要切换到被合并的分支上，再进行合并操作。<br>    2、分支合并时，可以选择具体的某提交进行合并，同时主分支可以合并到子分支；子分支可以合并到主分支；子分支之间也可以进行合并。</p><h4 id="（5）GIT与SVN同步"><a href="#（5）GIT与SVN同步" class="headerlink" title="（5）GIT与SVN同步"></a>（5）GIT与SVN同步</h4><p>​    git svn工具集在当前不得不使用 Subversion 服务器或者开发环境要求使用 Subversion 服务器的时候格外有用。不妨把它看成一个跛脚的 Git，在实际使用中不推荐这样使用GIT。</p><h4 id="（6）基本步骤"><a href="#（6）基本步骤" class="headerlink" title="（6）基本步骤"></a>（6）基本步骤</h4><p>提交、拉取和推送<br>提交：<br>    项目提交是为了维护本地版本库，如果本地有未提交的内容，则不允许拉取和推送；如图所示区域有内容时，则代表本地未提交的内容：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE14.png" alt=""></p><p>​    点击Stage All，填写提交信息既可以将本地内容（暂存区）提交到本地版本库，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE15.png" alt=""></p><p>​    1、将未暂存的文件进行暂存，如果有些文件不需要暂存，则可以进行删除，选中文件，右键“移除”即可。<br>​    拉取：从远程将代码进行更新，相当于SVN的“更新”<br>​    推送：将代码提交到远程。</p><h4 id="（7）解决冲突"><a href="#（7）解决冲突" class="headerlink" title="（7）解决冲突"></a>（7）解决冲突</h4><p>​    简单介绍<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE16.png" alt=""></p><p>​    1、冲突文件的符号为“感叹号”<br>​    2、选中“冲突文件”，右键——点击”解决冲突“——点击”打开外部合并工具“（备注：才操作时已经安装外部合并工具，同时在sourcetree中已经进行配置，详见”集成文件对比插件“）</p><p>​    冲突界面</p><p>​    冲突解决界面如下：可以根据需要选择内容显示类型，只”显示更改“，”显示冲突“或者”全部“<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE17.png" alt=""></p><p>​    解决冲突</p><p>​    方法一：在相关的版本处，选中”冲突行”，合并区默认处于合并位置，鼠标右键，选择最终冲突地方留下的内容，如图：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE18.png" alt=""></p><p>​    解决冲突之后效果图：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE19.png" alt=""></p><p>​    1、冲突图标由”感叹号”——“省略号”。<br>​    2、右侧显示修改后的代码进行查看。<br>​    3、同时修改的冲突文件有相应的备份，大家可以下载到本地，方便冲突有问题再次修改文件。<br>备注：该文件下载之后请将版本库中的该文件删除，不要上传到版本库中。<br>​    4、修改完冲突之后，需要再次提交，推送。大家养成提交时，提交有效的日志信息，不要将比如：123之类的信息推送到服务器中。<br>​    方法二：如果冲突非常少，可以直接在右侧栏中解决冲突，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE20.png" alt=""></p><p>​    1、点击未暂存区域的冲突文件。<br>​    2、右侧列表中出现冲突的内容。<br>​    3、选择冲突内容，解决冲突，如图所示：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE21.png" alt=""></p><p>​    暂存行：表示保留该内容<br>​    丢弃行：表示删除该内容<br>​    备注：区分于第一种方式，使用第一种方法解决时，不要点击”未暂存文件”,否则可能无法打开冲突文件</p><h4 id="（8）版本回退"><a href="#（8）版本回退" class="headerlink" title="（8）版本回退"></a>（8）版本回退</h4><p>​    原则上，代码推送之前要保证本地的代码可运行，不要将不可运行或者有问题的代码推送到服务器上，如果由于误操作，将代码推送到了远程，想重新修改上传代码，此时，需要将版本进行回退，回    退方法如图：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE22.png" alt=""></p><p>​    1、切换到日志/历史标签<br>​    2、选择要恢复到的版本，如图蓝色位置<br>​    3、鼠标右键，选择“重置当前分支到此次提交”<br>​    4、选择”重置模式”，如图所示<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE23.png" alt=""></p><p>​    5、弹出框中选择”Yes”<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE24.png" alt=""></p><h4 id="（9）相关提示信息含义"><a href="#（9）相关提示信息含义" class="headerlink" title="（9）相关提示信息含义"></a>（9）相关提示信息含义</h4><p>​    冲突信息<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE25.png" alt=""></p><p>​    先更新信息<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE26.png" alt=""><br>​    小窍门：<br><img src="https://gitee.com/zhou_jin_yuan/blogimage/raw/master/img/Git%E5%92%8CGitHub%E8%AF%A6%E8%A7%A3%E5%9B%BE27.png" alt=""><br>​    如果推送时，拉取右上方显示数字，则需要先拉取再推送。</p><h3 id="五、SourceTree-amp-Git部分名词解释"><a href="#五、SourceTree-amp-Git部分名词解释" class="headerlink" title="五、SourceTree&amp;Git部分名词解释"></a>五、SourceTree&amp;Git部分名词解释</h3><p><strong>克隆(clone)</strong>：从远程仓库URL加载创建一个与远程仓库一样的本地仓库<br><strong>提交(commit)</strong>：将暂存文件上传到本地仓库（我们在Finder中对本地仓库做修改后一般都得先提交一次，再推送）<br><strong>检出(checkout)</strong>：切换不同分支<br><strong>添加（add）</strong>：添加文件到缓存区<br><strong>移除（remove）</strong>：移除文件至缓存区<br><strong>暂存(git stash)</strong>：保存工作现场<br><strong>重置(reset)</strong>：回到最近添加(add)/提交(commit)状态<br><strong>合并(merge)</strong>：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消<br><strong>抓取(fetch)</strong>：从远程仓库获取信息并同步至本地仓库<br><strong>拉取(pull)</strong>：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作，即 pull=fetch+merge<br><strong>推送(push)</strong>：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致<br><strong>分支(branch)</strong>：创建/修改/删除分枝<br><strong>标签(tag)</strong>:给项目增添标签<br><strong>工作流(Git Flow)</strong>:团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到master分枝<br><strong>终端(terminal)</strong>:可以输入git命令行</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
